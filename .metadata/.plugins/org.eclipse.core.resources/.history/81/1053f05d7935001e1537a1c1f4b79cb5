package br.ufrn.imd.solicitacaurn.solus.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import br.com.mkapi.solus.domain.AvisoAtualizacao;
import br.com.mkapi.solus.repository.AvisoAtualizacaoRepository;

@Controller
@RequestMapping("/api/solus/avisoAtualizacao")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class AvisoAtualizacaoController {

    @Autowired
	private AvisoAtualizacaoRepository avisoAtualizacaoRepository;

    DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

    @GetMapping
	public ResponseEntity<List<AvisoAtualizacao>> getAll() {
		List<AvisoAtualizacao> avisos = avisoAtualizacaoRepository.findAll();
		
		return new ResponseEntity<>(avisos, HttpStatus.OK);
	}

    @GetMapping("/{id}")
	public ResponseEntity<AvisoAtualizacao> getById(@PathVariable(value = "id") Long id) {
		Optional<AvisoAtualizacao> opt = avisoAtualizacaoRepository.findByIdAtivo(id);
		
		if(opt.isPresent()){
			AvisoAtualizacao avisoAtualizacao = opt.get();

			return new ResponseEntity<>(avisoAtualizacao, HttpStatus.OK);
		}
		else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}	

	@GetMapping("/getUltimaAtualizacao")
	public ResponseEntity<AvisoAtualizacao> getUltimaAtualizacao() {
		Optional<AvisoAtualizacao> opt = avisoAtualizacaoRepository.findUltimaAtualizacao();
		
		if(opt.isPresent()){
			AvisoAtualizacao avisoAtualizacao = opt.get();

			return new ResponseEntity<>(avisoAtualizacao, HttpStatus.OK);
		}
		else{
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}

    @PostMapping("/inativarAviso/{id}")
	public ResponseEntity<Object> inativarAvisoAtualizacao(@PathVariable(value = "id") Long id) {
		try{
			avisoAtualizacaoRepository.inativarAvisoAtualizacao(id);

			return new ResponseEntity<>("Aviso de atualização inativado com sucesso.", HttpStatus.OK);
		}
		catch(Exception e){
			return new ResponseEntity<>("Erro na inativação de um novo aviso de atualização.", HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}		

    @PostMapping
	public ResponseEntity<Object> post(@RequestBody AvisoAtualizacao avisoAtualizacao){
		try{
			Calendar calendar = Calendar.getInstance();
			avisoAtualizacao.setDataCriacao(calendar.getTime());

			avisoAtualizacao.setAtivo(1);

			avisoAtualizacao = avisoAtualizacaoRepository.save(avisoAtualizacao);

			avisoAtualizacaoRepository.inativarAvisosAtualizacao(avisoAtualizacao.getId());

			return new ResponseEntity<>(avisoAtualizacao, HttpStatus.OK);
		}
		catch(Exception e){
        	return new ResponseEntity<>("Erro na criação de um novo aviso de atualização.", HttpStatus.FORBIDDEN);
		}
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<AvisoAtualizacao> post(@PathVariable(value = "id") Long id){
		Optional<AvisoAtualizacao> opt = avisoAtualizacaoRepository.findById(id);
		if(!opt.isPresent())
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		else{
			avisoAtualizacaoRepository.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);	
		}
	}    
}
