package br.ufrn.imd.solicitacaurn.solus.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import br.com.mkapi.firebase.domain.PushNotificationRequest;
import br.com.mkapi.firebase.domain.PushNotificationResponse;
import br.com.mkapi.service.PushNotificationService;
import br.com.mkapi.solus.domain.NotificacaoSolus;
import br.com.mkapi.solus.repository.NotificacaoSolusRepository;

@Controller
@RequestMapping("/api/solus/notificacoes")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class NotificationSolusController {

    private PushNotificationService pushNotificationService;

    @Autowired
    private NotificacaoSolusRepository notificacaoRepository;

    public NotificationSolusController(PushNotificationService pushNotificationService) {
        this.pushNotificationService = pushNotificationService;
    }

    @GetMapping("/{idUsuario}/getAllByIdUsuario")
    public ResponseEntity<List<NotificacaoSolus>> getAllByIdUsuario(@PathVariable("idUsuario") Long idUsuario) {
        List<NotificacaoSolus> notificacoes = notificacaoRepository.getAllByIdUsuario(idUsuario);
        return new ResponseEntity<>(notificacoes, HttpStatus.OK);
    }

    @GetMapping("/{idUsuario}/countNaoVisualizadasByIdUsuario")
    public ResponseEntity<Integer> countNaoVisualizadasByIdUsuario(@PathVariable("idUsuario") Long idUsuario) {
        int count = notificacaoRepository.countNaoVisualizadasByIdUsuario(idUsuario);
        return new ResponseEntity<>(count, HttpStatus.OK);
    }

    @PostMapping("/{idUsuario}/markAllRead")
    public ResponseEntity<NotificacaoSolus> markAllRead(@PathVariable("idUsuario") Long idUsuario) {
        List<NotificacaoSolus> notificacoes = notificacaoRepository.getNaoVisualizadasByIdUsuario(idUsuario);

        notificacoes.forEach(n -> {
            n.setVisualizou(true);
        });

        notificacaoRepository.saveAll(notificacoes);

        return new ResponseEntity<>(null, HttpStatus.OK);
    }

    @PostMapping("/{idUsuario}/removeAll")
    public ResponseEntity<Object> removeAll(@PathVariable("idUsuario") Long idUsuario) {
        List<NotificacaoSolus> notificacoes = notificacaoRepository.getAllByIdUsuario(idUsuario);

        notificacoes.forEach(n -> {
            n.setAtivo(false);
        });

        notificacaoRepository.saveAll(notificacoes);
        return new ResponseEntity<>(null, HttpStatus.OK);
    }

    @GetMapping("/{idUsuario}/getAllNaoVisualizadasByUsuario")
    public ResponseEntity<List<NotificacaoSolus>> getNaoVisualizadasByIdUsuario(
            @PathVariable("idUsuario") Long idUsuario) {
        List<NotificacaoSolus> notificacoes = notificacaoRepository.getNaoVisualizadasByIdUsuario(idUsuario);

        return new ResponseEntity<>(notificacoes, HttpStatus.OK);
    }

    @PostMapping("/{idNotification}/markAsRead")
    public ResponseEntity<Object> markAsRead(@PathVariable("idNotification") Long idNotification) {
        NotificacaoSolus notificacoes = notificacaoRepository.findById(idNotification).get();
        notificacoes.setVisualizou(true);
        notificacaoRepository.save(notificacoes);
        return new ResponseEntity<>(null, HttpStatus.OK);
    }

    @PostMapping("/{idNotification}/remove")
    public ResponseEntity<Object> remove(@PathVariable("idNotification") Long idNotification) {
        NotificacaoSolus notificacoes = notificacaoRepository.findById(idNotification).get();
        notificacoes.setAtivo(false);
        notificacaoRepository.save(notificacoes);
        return new ResponseEntity<>(null, HttpStatus.OK);
    }

    @PostMapping("/notification/topic")
    public ResponseEntity<Object> sendNotification(@RequestBody PushNotificationRequest request) {
        pushNotificationService.sendToTopic(request);
        return new ResponseEntity<>(new PushNotificationResponse(HttpStatus.OK.value(), "Notification has been sent."),
                HttpStatus.OK);
    }

    @PostMapping("/notification/token")
    public ResponseEntity<Object> sendTokenNotification(@RequestBody PushNotificationRequest request) {
        pushNotificationService.sendPushNotificationToToken(request);
        return new ResponseEntity<>(new PushNotificationResponse(HttpStatus.OK.value(), "Notification has been sent."),
                HttpStatus.OK);
    }

    @PostMapping("/notification/data")
    public ResponseEntity<Object> sendDataNotification(@RequestBody PushNotificationRequest request) {
        pushNotificationService.sendPushNotification(request);
        return new ResponseEntity<>(new PushNotificationResponse(HttpStatus.OK.value(), "Notification has been sent."),
                HttpStatus.OK);
    }

    @GetMapping("/notification")
    public ResponseEntity<Object> sendSampleNotification() {
        try {
            pushNotificationService.sendSamplePushNotification();
            return new ResponseEntity<>(
                    new PushNotificationResponse(HttpStatus.OK.value(), "Notification has been sent."), HttpStatus.OK);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

}
