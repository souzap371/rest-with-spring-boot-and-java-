package br.ufrn.imd.solicitacaurn.service;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import br.com.mkapi.firebase.domain.PushNotificationRequest;
import br.com.mkapi.mkdata.domain.Agendas;
import br.com.mkapi.mkdata.repository.AgendasRepositoryMkdata;
import br.com.mkapi.mkdata.repository.PacienteRepositoryMkdata;
import br.com.mkapi.solus.domain.BeneficiarioSolus;
import br.com.mkapi.solus.domain.EspecialidadeNotificacaoDesativada;
import br.com.mkapi.solus.domain.NotificacaoSolus;
import br.com.mkapi.solus.domain.UsuarioSolusAppMob;
import br.com.mkapi.solus.domain.enums.TipoSolicitacao;
import br.com.mkapi.solus.repository.BeneficiarioSolusRepository;
import br.com.mkapi.solus.repository.EspecialidadeNotificacaoDesativadaRepository;
import br.com.mkapi.solus.repository.NotificacaoSolusRepository;
import br.com.mkapi.solus.repository.UsuarioSolusAppMobRepository;
import br.com.mkapi.utils.EmailHelper;

@Component
@EnableScheduling 
public class NotificationJobMkdata {

	@Autowired
	private AgendasRepositoryMkdata agendamentoRepository;

	@Autowired
	private UsuarioSolusAppMobRepository usuarioRepository;

	@Autowired
	private NotificacaoSolusRepository notificacaoRepository;
	
	@Autowired
	private PushNotificationService pushNotificationService;

	@Autowired
	private PacienteRepositoryMkdata pacienteRepository;

	@Autowired
	private BeneficiarioSolusRepository beneficiarioSolusRepository;
	
	@Autowired
	private EmailHelper emailHelper;

	@Autowired
	private EspecialidadeNotificacaoDesativadaRepository especialidadeNotificacaoDesativadaRepository;
	
	/*
	 * A cada 12 horas, este método pega as agendas nas próximas 24 horas, e envia notificação
	 * para os usuários, apenas para os agendamentos que ainda não tenham sido confirmados.
	 */
	@Scheduled(fixedDelay = 43200000)//12 horas em milisegundos
	public void sendAlertNotificationAgendamento() {
		List<Agendas> list = agendamentoRepository.getByTimeFor24h();
		
		List<EspecialidadeNotificacaoDesativada> especialidades = especialidadeNotificacaoDesativadaRepository.findAll();
		List<Long> ids = especialidades.stream().map(e -> e.getIdEspecialidade()).collect(Collectors.toList());

		list.forEach(a ->{
			DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
			
			List<String> carteiras = pacienteRepository.getCodigoBeneficiarioByIdPaciente(a.getPaciente().getId());
	
			if(!carteiras.isEmpty()){
				String codigoCarteira = "";

				if(carteiras.size() > 1){
					for(String s : carteiras){
						if(beneficiarioSolusRepository.findByNumcarteira(s).isPresent()){
							codigoCarteira = s;
							break;
						}
					}
				} else{
					codigoCarteira = carteiras.get(0);
				}
		
				Optional<UsuarioSolusAppMob> optUsuario = usuarioRepository.findByCodigoBeneficiario(codigoCarteira);
				if(optUsuario.isPresent()){
					UsuarioSolusAppMob u = optUsuario.get();

					//Envio de notificação e email apenas se a especialidade não estiver com suas notificações desativadas.
					if(!Objects.isNull(u) && !ids.contains(a.getEspecialidade().getId())) {
						PushNotificationRequest msg = new PushNotificationRequest();
						msg.setToken(u.getFirebaseToken());
						msg.setTitle("Atenção! Lembre-se de confirmar o agendamento");
						msg.setMessage("O agendamento para "+dtf.format(a.getDataAgenda()) +" às " +
						a.getHoraInicio() +" referente ao beneficiário: "+ a.getPaciente().getNome() + " ainda não foi confirmado.");
						msg.setTipoSolicitacao(TipoSolicitacao.AGENDAMENTO);
						msg.setIdSolicitacao(String.valueOf(a.getId()));
						msg.setIdUsuario(u.getId());
						
						if(!Objects.isNull(u.getFirebaseToken()))
							pushNotificationService.sendPushNotificationToToken(msg);
						
						notificacaoRepository.save(new NotificacaoSolus(msg, u));
						
						if(u.getEmail() == null || u.getEmail().equals("")){
							Optional<BeneficiarioSolus> beneficiario = beneficiarioSolusRepository.findByNumcarteira(u.getCodigoSolus());
							if(beneficiario.isPresent()){
								u.setBeneficiario(beneficiario.get());
							}
						}
						emailHelper.enviaAlertaConfirmacaoAgendamentoEmail(a,u);
					}					
				}
			}
		});
	}
}
