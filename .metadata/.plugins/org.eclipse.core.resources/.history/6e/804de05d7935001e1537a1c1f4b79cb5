package br.ufrn.imd.solicitacaurn.service.jwt;

import java.util.Collection;
import java.util.HashSet;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import br.com.mkapi.solus.domain.UsuarioSolusAppMob;
import br.com.mkapi.solus.repository.UsuarioSolusAppMobRepository;

@Component
public class AuthProviderService implements AuthenticationProvider {

	@Autowired
	protected UsuarioSolusAppMobRepository usuarioRepository;
	
	@Override
    public Authentication authenticate(Authentication auth) throws AuthenticationException {    	
    	String numCarteira = auth.getName();
        String senha = auth.getCredentials().toString();
        UsuarioSolusAppMob usuario = usuarioRepository.findByCodigoSolus(numCarteira);
        
    	   if (!Objects.isNull(usuario)) {
               Collection<? extends GrantedAuthority> authorities = new HashSet<>();
               return new UsernamePasswordAuthenticationToken(usuario, senha,authorities);
           }
           throw new UsernameNotFoundException("Login e/ou Senha inv√°lidos.");  
    }

	@Override
	public boolean supports(Class<?> authentication) {
		return authentication.equals(UsernamePasswordAuthenticationToken.class);
	}

	protected boolean verificarSenha(UsuarioSolusAppMob usuario, String senha){
		if(usuario.getSenha().equals(senha))
    		return true;
    	return false;
    }
}
