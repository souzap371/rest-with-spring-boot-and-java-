package br.ufrn.imd.solicitacaurn.solus.repository;

import java.util.Date;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.com.mkapi.solus.domain.UsuarioSolusAppMob;

@Repository
public interface UsuarioSolusAppMobRepository extends JpaRepository<UsuarioSolusAppMob, Long> {	
	
	
	@Query(value = "select u from usuario_solus_app_mob u where email = ?1 or login = ?1", nativeQuery = true)
	public UsuarioSolusAppMob findByEmailOrLogin(String email);

	@Query(value = "select u from usuario_solus_app_mob u where login like ?1", nativeQuery = true)
	public UsuarioSolusAppMob findByLogin(String loginUsuario);
	
	@Query(value = "select u from usuario_solus_app_mob u where login like ?1", nativeQuery = true)
	public UsuarioSolusAppMob findByLogin2(String loginUsuario);
	
	@Query(value = "select distinct(usuario.*) from usuario_solus_app_mob usuario inner join public.plano plano on usuario.id_plano = plano.id "
			+ "inner join public.beneficiario b on plano.id = b.id_plano where b.id= ?1", nativeQuery = true)
	public UsuarioSolusAppMob findByIdBeneficiario(Long idBeneficiario);
	

	@Query(value = "select usuario.* from usuario_solus_app_mob usuario  "
			+ "where usuario.id_solus= ?1 and usuario.ativo=1", nativeQuery = true)
	public UsuarioSolusAppMob findByIdSolus(Long idSolus);
	
	@Query(value = "select usuario.* from usuario_solus_app_mob usuario  "
			+ "where usuario.codigo_solus= ?1 and usuario.ativo=1", nativeQuery = true)
	public UsuarioSolusAppMob findByCodigoSolus(String idSolus);

	@Query(value = "select usuario.* from usuario_solus_app_mob usuario  "
			+ "where usuario.codigo_solus= ?1 and usuario.ativo=1", nativeQuery = true)
	public Optional<UsuarioSolusAppMob> findUserAppMobByCodigoSolus(String idSolus);
	
	@Query(value="select u.* from usuario_solus_app_mob u " + 
			" where u.ativo=1 " + 
			" and u.codigo_solus = ?1 and TO_CHAR(u.data_nascimento, 'yyyy-MM-dd') = TO_CHAR(?2, 'yyyy-MM-dd')", nativeQuery = true)
	Optional<UsuarioSolusAppMob> getByDados(String numCarteira, Date data);

	
	@Query(value = "select u.* from usuario_solus_app_mob u where u.ativo=1 and u.id=?1", nativeQuery = true)
	public Optional<UsuarioSolusAppMob> findById(Long id);
	
	@Query(value="select DISTINCT(u.*) from usuario_solus_app_mob u " + 
			" where u.ativo=1 " + 
			" and (sem_carecteres_especiais(pl.num_carteira) = sem_carecteres_especiais(?1) " + 
			"or sem_carecteres_especiais(pe.cpf) = sem_carecteres_especiais(?1))"
			,nativeQuery = true)
	public Optional<UsuarioSolusAppMob> findByCpfOrNumcarteira(String numCarteira);
	
	@Query(value="select DISTINCT(u.*) from usuario_solus_app_mob u \n"
			+ "			 where u.ativo=1 \n"
			+ "			 and (sem_carecteres_especiais(pe.cpf) = sem_carecteres_especiais(?1) \n"
			+ "			or u.codigo_solus = ?1) ",nativeQuery = true)
	public Optional<UsuarioSolusAppMob> findByCpfOrNumcarteiraSolus(String numCarteira);
	
	@Query(value="select * from usuario_solus_app_mob u \n"
			+ " where u.ativo=1 \n"
			+ "	and u.codigo_solus = ?1 ",nativeQuery = true)
	public Optional<UsuarioSolusAppMob> findByCodigoBeneficiario(String codigoBeneficiario);

    @Transactional
	@Modifying
    @Query(value = "UPDATE usuario_solus_app_mob usam "
    + "SET usam.ver_noticia_destaque = 1 WHERE usam.ver_noticia_destaque = 0 AND usam.ativo = 1", nativeQuery = true)
    public void updateVerNoticiaDestaque();	
	//Faz com que todos os usuários voltem a ver a notícia em destaque mais recente no menu principal.
}
