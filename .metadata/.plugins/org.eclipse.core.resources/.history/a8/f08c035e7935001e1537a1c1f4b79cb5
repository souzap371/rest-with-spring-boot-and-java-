package br.ufrn.imd.solicitacaurn.solus.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import br.com.mkapi.solus.domain.RegraAgendamento;
import br.com.mkapi.solus.repository.RegraAgendamentoRepository;

@Controller
@RequestMapping("/api/solus/regraAgendamento")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class RegraAgendamentoController {

	@Autowired
	private RegraAgendamentoRepository repository;

	@GetMapping
	public ResponseEntity<List<RegraAgendamento>> getAll() {
		List<RegraAgendamento> faqs = repository.findAll();
		return new ResponseEntity<>(faqs, HttpStatus.OK);
	}

	@PostMapping
	public ResponseEntity<Object> post(@RequestBody RegraAgendamento regra) {
		if (regra.getIdProfissional() != null && regra.getIdEspecialidade() != null) {
			regra = repository.save(regra);
			return new ResponseEntity<>(regra, HttpStatus.OK);
		} else
			return new ResponseEntity<>("É necessário informar o id do profissional e o id da especialidade.",
					HttpStatus.FORBIDDEN);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<RegraAgendamento> post(@PathVariable(value = "id") Long id) {
		Optional<RegraAgendamento> opt = repository.findById(id);
		if (!opt.isPresent())
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		else {
			repository.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		}
	}
}