package br.ufrn.imd.solicitacaurn.service.jwt;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;

import br.com.mkapi.solus.domain.Papel;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class TokenAuthenticationService {
	
	// EXPIRATION_TIME = 24 horas
		static final long EXPIRATION_TIME = 999999999999999999L;
		static final String SECRET = "MySecret";
		static final String TOKEN_PREFIX = "Bearer";
		static final String HEADER_STRING = "Authorization";
		
		public static void addAuthentication(HttpServletResponse response, String username) {
			String JWT = Jwts.builder()
					.setSubject(username)
					.setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
					.signWith(SignatureAlgorithm.HS512, SECRET)
					.compact();
			
			response.addHeader(HEADER_STRING, TOKEN_PREFIX + " " + JWT);
		}
		
		static Authentication getAuthentication(HttpServletRequest request) {
			String token = request.getHeader(HEADER_STRING);
			
			if (token != null) {
				// faz parse do token
				String user = Jwts.parser()
						.setSigningKey(SECRET)
						.parseClaimsJws(token.replace(TOKEN_PREFIX, ""))
						.getBody()
						.getSubject();
				
				
				if (user != null) {
					
					Papel p = new Papel();
					p.setId(UUID.randomUUID());
					p.setDescricao("Administrador");
					p.setCodigo("ADMIN");
					
					List<Papel> permisoes = new ArrayList<>();
					permisoes.add(p);
					
					return new UsernamePasswordAuthenticationToken(user, null, permisoes);
				}
			}
			return null;
		}


}
