package br.ufrn.imd.solicitacaurn.solus.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.mkapi.firebase.domain.PushNotificationRequest;
import br.com.mkapi.service.ArquivoService;
import br.com.mkapi.service.PushNotificationService;
import br.com.mkapi.solus.domain.AbstractEntity;
import br.com.mkapi.solus.domain.AnexoPedido;
import br.com.mkapi.solus.domain.BeneficiarioSolus;
import br.com.mkapi.solus.domain.NotificacaoSolus;
import br.com.mkapi.solus.domain.Pedido;
import br.com.mkapi.solus.domain.PedidoFilter;
import br.com.mkapi.solus.domain.PedidoView;
import br.com.mkapi.solus.domain.UsuarioSolusAppMob;
import br.com.mkapi.solus.domain.enums.TipoSolicitacao;
import br.com.mkapi.solus.domain.enums.TipoStatusAutorizacao;
import br.com.mkapi.solus.repository.AnexoPedidoRepository;
import br.com.mkapi.solus.repository.BeneficiarioSolusRepository;
import br.com.mkapi.solus.repository.NotificacaoSolusRepository;
import br.com.mkapi.solus.repository.PedidoRepository;
import br.com.mkapi.solus.repository.PedidoViewCustomRepository;
import br.com.mkapi.solus.repository.UsuarioSolusAppMobRepository;
import br.com.mkapi.utils.EmailHelper;

@Controller
@RequestMapping("/api/solus/pedido")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class PedidoController extends AbstractController<AbstractEntity> {

	@Autowired
	PedidoRepository pedidoRepository;
	
	@Autowired
	private UsuarioSolusAppMobRepository usuarioRepository;
	
	@Autowired
	private PushNotificationService pushNotificationService;
	
	@Autowired
	private NotificacaoSolusRepository notificacaoRepository;
	
	@Autowired
	private ArquivoService arquivoService;
	
	@Autowired
	private PedidoViewCustomRepository pedidoViewRepository;
	
	@Autowired
	private EmailHelper emailHelper;
	
	@Autowired
	private BeneficiarioSolusRepository beneficiarioRepository;

	@Autowired
	private AnexoPedidoRepository anexoPedidoRepository;
	
	DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
	
	@GetMapping("/view/getById/{idPedido}")
	public ResponseEntity<PedidoView> getPedidoViewById(@PathVariable("idPedido") Long idPedido){
		PedidoView pv = pedidoViewRepository.getById(idPedido);
		
		return new ResponseEntity<>(pv, HttpStatus.OK);
	}
	
	@PostMapping("/view/getByBeneficiario/{chaveBeneficiario}/{offset}")
	public ResponseEntity<List<PedidoView>> getPedidosViewByBeneficiario(@PathVariable("chaveBeneficiario") Long chaveBeneficiario, @PathVariable("offset") Integer offset, @RequestBody(required=false) PedidoFilter filter){
		UsuarioSolusAppMob u = usuarioRepository.findByIdSolus(chaveBeneficiario);
		Optional<BeneficiarioSolus> b = beneficiarioRepository.findByNumcarteira(u.getCodigoSolus());

		if(b.isPresent()){
			u.setBeneficiario(b.get());
		}

		if(!Objects.isNull(u)) {
			
			if(Objects.isNull(filter)) filter = new PedidoFilter();
			
			List<PedidoView> list = pedidoViewRepository.filteredPedidoViewByUsuario(u, filter, offset);
				
			return new ResponseEntity<>(list, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@GetMapping("/{idPedido}/autorizar")
	public ResponseEntity<Pedido> autorizarPedido(@PathVariable("idPedido") Long idPedido){
		Pedido ped = pedidoRepository.findById(idPedido).get();
		ped.setStatus(TipoStatusAutorizacao.AUTORIZADO.toString());
		pedidoRepository.save(ped);
		
		//Envio de notificação para o usuário.
		UsuarioSolusAppMob u = usuarioRepository.findByIdSolus(ped.getBeneficiario().getChaveBeneficiario());
		if(!Objects.isNull(u)) {
			PushNotificationRequest msg = new PushNotificationRequest();
			msg.setToken(u.getFirebaseToken());
			msg.setTitle("Status da Autorização");
			msg.setMessage("A autorização solicitada em "+ dtf.format(ped.getDtPedido()) +" foi autorizada com sucesso");
			msg.setTipoSolicitacao(TipoSolicitacao.AUTORIZACAO);
			msg.setIdSolicitacao(ped.getIdPedido().toString());
			msg.setIdUsuario(u.getId());
			
			if(!Objects.isNull(u.getFirebaseToken()))
				pushNotificationService.sendPushNotificationToToken(msg);
			notificacaoRepository.save(new NotificacaoSolus(msg, u));
		}
		return new ResponseEntity<>(ped, HttpStatus.OK);
	}

	@GetMapping("/{idPedido}/cancelar")
	public ResponseEntity<Pedido> cancelarPedido(@PathVariable("idPedido") Long idPedido){
		Pedido ped = pedidoRepository.findById(idPedido).get();
		ped.setStatus(TipoStatusAutorizacao.NEGADO.toString());
		pedidoRepository.save(ped);
		
		//Envio de notificação para o usuário.
		UsuarioSolusAppMob u = usuarioRepository.findByIdSolus(ped.getBeneficiario().getChaveBeneficiario());
		if(!Objects.isNull(u)) {
			PushNotificationRequest msg = new PushNotificationRequest();
			msg.setToken(u.getFirebaseToken());
			msg.setTitle("Status da Autorização");
			msg.setMessage("A autorização solicitada em "+ dtf.format(ped.getDtPedido()) +" foi cancelado");
			msg.setTipoSolicitacao(TipoSolicitacao.AUTORIZACAO);
			msg.setIdSolicitacao(ped.getIdPedido().toString());
			msg.setIdUsuario(u.getId());
			
			if(!Objects.isNull(u.getFirebaseToken()))
				pushNotificationService.sendPushNotificationToToken(msg);
			notificacaoRepository.save(new NotificacaoSolus(msg, u));
		}
		return new ResponseEntity<>(ped, HttpStatus.OK);
	}
	
	@GetMapping("/{idPedido}/analise")
	public ResponseEntity<Pedido> analisePedido(@PathVariable("idPedido") Long idPedido){
		Pedido ped = pedidoRepository.findById(idPedido).get();
		ped.setStatus(TipoStatusAutorizacao.EM_ANALISE.toString());
		pedidoRepository.save(ped);
		
		//Envio de notificação para o usuário.
		UsuarioSolusAppMob u = usuarioRepository.findByIdSolus(ped.getBeneficiario().getChaveBeneficiario());
		if(!Objects.isNull(u)) {
			PushNotificationRequest msg = new PushNotificationRequest();
			msg.setToken(u.getFirebaseToken());
			msg.setTitle("Status da Autorização");
			msg.setMessage("A autorização solicitada em "+ dtf.format(ped.getDtPedido()) +" está em análise");
			msg.setTipoSolicitacao(TipoSolicitacao.AUTORIZACAO);
			msg.setIdSolicitacao(ped.getIdPedido().toString());
			msg.setIdUsuario(u.getId());
			
			if(!Objects.isNull(u.getFirebaseToken()))
				pushNotificationService.sendPushNotificationToToken(msg);
			notificacaoRepository.save(new NotificacaoSolus(msg, u));
		}
		return new ResponseEntity<>(ped, HttpStatus.OK);
	}
	
	@PostMapping("/salvar")
	public ResponseEntity<String> salvar(@RequestParam("pedido") String pedido, @RequestParam("files") List<MultipartFile> files) {
		if(files == null || files.isEmpty()){
			return new ResponseEntity<>("É necessário inserir pelo menos uma guia nos documentos da autorização.", HttpStatus.FORBIDDEN);
		}

		Pedido pedi = fromJson(pedido);

		//Realiza ajuste de fuso horário, incrementando a hora em 3.
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(pedi.getDtPedido());
		calendar.add(Calendar.HOUR_OF_DAY, 3);
		pedi.setDtPedido(calendar.getTime());
		
		pedi = pedidoRepository.saveAndFlush(pedi);
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSS");
		List<AnexoPedido> anexos = new ArrayList<AnexoPedido>();
		int i = 0;

		for(MultipartFile file : files) {
			AnexoPedido ap = new AnexoPedido();

			if(pedi.getBeneficiario() != null && pedi.getBeneficiario().getCodigoBeneficiario() != null){
				LocalDateTime now = LocalDateTime.now();  
				String nomeAnexo = pedi.getIdPedido().toString() + "_" + pedi.getBeneficiario().getCodigoBeneficiario() + dtf.format(now) + i + arquivoService.gerarExtensao(file.getOriginalFilename());
				ap.setNomeAnexo(nomeAnexo);
			} else{
				String filename = pedi.getIdPedido().toString() + "_" + file.getOriginalFilename();
				ap.setNomeAnexo(filename);
			}

			ap.setPedido(pedi);
			anexos.add(ap);
			
			arquivoService.salvarAnexo(file, ap.getNomeAnexo());
			i++;
		}
		
		pedi.setAnexos(anexos);
		
		pedidoRepository.saveAndFlush(pedi);
		
		if(pedi.getBeneficiario() != null){
			UsuarioSolusAppMob user = usuarioRepository.findByIdSolus(pedi.getBeneficiario().getChaveBeneficiario());
			if(user != null){
				if(user.getEmail() == null || user.getEmail().equals("")){
					Optional<BeneficiarioSolus> beneficiario = beneficiarioRepository.findByNumcarteira(user.getCodigoSolus());
					if(beneficiario.isPresent()){
						user.setBeneficiario(beneficiario.get());
					}
				}				
				emailHelper.enviaConfirmacaoAutorizacaoEmail(pedi, user);
			}
		}
		
		return new ResponseEntity<>("sucesso.", HttpStatus.OK);
	}
	
	@PostMapping("/addFilesToPedido/{idPedido}")
	public ResponseEntity<String> addFilesToPedido(@PathVariable("idPedido") Long idPedido, @RequestParam("files") List<MultipartFile> files) {
		Pedido pedido = pedidoRepository.findById(idPedido).orElse(null);
		
		if(!Objects.isNull(pedido)) {

			int i = 0;
			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyyMMddHHmmssSS");
			for(MultipartFile file : files) {
				AnexoPedido ap = new AnexoPedido();

				if(pedido.getBeneficiario() != null && pedido.getBeneficiario().getCodigoBeneficiario() != null){
					LocalDateTime now = LocalDateTime.now();  
					String nomeAnexo = idPedido.toString() + "_" + pedido.getBeneficiario().getCodigoBeneficiario() + dtf.format(now) + i + arquivoService.gerarExtensao(file.getOriginalFilename());
					ap.setNomeAnexo(nomeAnexo);
				} else{
					String filename = idPedido.toString() + "_" + file.getOriginalFilename();
					ap.setNomeAnexo(filename);
				}

				ap.setPedido(pedido);
				
				arquivoService.salvarAnexo(file, ap.getNomeAnexo());
				anexoPedidoRepository.save(ap);
				i++;
			}
			
			return new ResponseEntity<>("sucesso.", HttpStatus.OK);
		} else {
			return new ResponseEntity<>("Pedido não encontrado", HttpStatus.INTERNAL_SERVER_ERROR);
		}
			
	}
	
	private Pedido fromJson(String ped) {
		Pedido pedido = new Pedido();
		try {
			ObjectMapper mapper = new ObjectMapper();
			pedido = mapper.readValue(ped, Pedido.class);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return pedido;
	}
	
	@Override
	protected JpaRepository<AbstractEntity, UUID> getRepository() {
		return null;
	}
}
