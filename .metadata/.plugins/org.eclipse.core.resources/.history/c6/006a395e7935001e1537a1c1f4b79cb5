package br.ufrn.imd.solicitacaurn.solus.repository;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.persistence.EntityManager;
import javax.sql.DataSource;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import br.com.mkapi.solus.domain.ProcedimentoSolus;

@Repository
public class ProcedimentoSolusCustomRepositoryImpl implements ProcedimentoSolusCustomRepository{

	@Autowired
	@Qualifier("mainEntityManagerFactory")
	private EntityManager entityManager;

	@Autowired
	@Qualifier("solus")
	private DataSource dt;
	
	@Override
	public List<ProcedimentoSolus> findAllNomeUsualSemAutorizacao() {
		StringBuilder queryBuilder = new StringBuilder();
		queryBuilder
		.append("SELECT DISTINCT nome_usual FROM procedimento_solus where necessita_autorizacao=0 and ativo=1 order by nome_usual asc");
		MapSqlParameterSource parameters = new MapSqlParameterSource();

		List<ProcedimentoSolus> projetos = new NamedParameterJdbcTemplate(dt).query(queryBuilder.toString(),parameters, new RowMapper<ProcedimentoSolus>() {

			@Override
			public ProcedimentoSolus mapRow(ResultSet rs, int rowNum) throws SQLException {
				ProcedimentoSolus p = new ProcedimentoSolus();
				p.setNomeUsual(rs.getString("nome_usual"));
				return p;
			}
		});
		
		return projetos;
	}
}
