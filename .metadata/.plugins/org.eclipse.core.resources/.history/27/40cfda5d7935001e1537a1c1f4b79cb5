package br.ufrn.imd.solicitacaurn.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.UUID;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import br.com.mkapi.solus.domain.ArquivoSolus;
import br.com.mkapi.solus.repository.ArquivoSolusRepository;

@Service
public class ArquivoService {
	
	//private static final String FORMATO_IMAGEM = ".png";
	//private static final String FORMATO_ARQUIVO = ".pdf";
	private static final String PREFIXO_BASE64 = "data:image/.+;base64,";
	
	@Autowired
	private ArquivoSolusRepository arquivoRepository;
	
	@Value("${arquivo.autorizacao.path}")
	String autorizacaoPath;
	
	@Value("${arquivo.pedido.path}")
	String pedidoPath;

	@Value("${cassi.termos.path}")
	String termosCassiPath;	
	
	public void salvarArquivo(ArquivoSolus arquivo) {
		if (ObjectUtils.isEmpty(arquivo) || ObjectUtils.isEmpty(arquivo.getConteudo())) {
			return;
		}
		try {
			File dir = new File(autorizacaoPath);
			if (!dir.exists())
				dir.mkdirs();


			String uuid = generateUUIdName(arquivo);
			arquivo.setNomeArquivo(uuid);
			arquivo.setPath(new StringBuilder()
					.append(pedidoPath)
					.append(File.separator)
					.append(arquivo.getNomeArquivo())
					.append(gerarExtensao(arquivo.getNomeOriginal()))
					.toString()
			);

			Path filepath = Paths.get(arquivo.getPath());

			Files.write(filepath, arquivo.getConteudo(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public String gerarExtensao(String nomeArquivo) {
        int index = nomeArquivo.lastIndexOf('.');
        String extension = nomeArquivo.substring(index);
        return extension;
    }
	
	public String recuperarArquivo(String path) {
		try {
			if (StringUtils.isEmpty(path) || !Files.exists(Paths.get(path))) {
				return "";
			}
			byte[] imageBytes = Files.readAllBytes(Paths.get(path));

			String base64 = Base64.encodeBase64String(imageBytes);
			String extensao = gerarExtensao(path);
			if(extensao.equals(".pdf")) {
				return "data:application/pdf;base64,"+base64;
			}else {
				return PREFIXO_BASE64+base64;
			}
			
		} catch (IOException e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}
	
	private String generateUUIdName(ArquivoSolus arquivo) {

		if (StringUtils.isEmpty(arquivo.getNomeArquivo()) && arquivo.getId() != null) {
			ArquivoSolus persistedFile = arquivoRepository.getOne(arquivo.getId());
			if(persistedFile.getNomeArquivo() != null){
				return persistedFile.getNomeArquivo();
			}
		}

		return UUID.randomUUID().toString();
	}
	
	public String recuperarAnexo(String filename) {
		String path = new StringBuilder(pedidoPath).append(File.separator).append(filename).toString();
		
		return recuperarArquivo(path);
	}
	
	public void salvarAnexo(MultipartFile file, String filename) {
		Path filepath = Paths.get(new StringBuilder(pedidoPath).append(File.separator).append(filename).toString());
	
		try {
			Files.write(filepath, file.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public String recuperarTermosCassi() {
		try {
			String s = recuperarArquivo(termosCassiPath);
			if(s == "") throw new Exception("Arquivo n√£o encontrado. Path: " + termosCassiPath);
			return s;
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
	}	
}
