package br.ufrn.imd.solicitacaurn.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import br.com.mkapi.service.jwt.AuthProviderService;
import br.com.mkapi.service.jwt.JWTAuthenticationFilter;
import br.com.mkapi.service.jwt.JWTLoginFilter;

@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
	
	@Autowired
	AuthProviderService auth;

    @Autowired
    protected void configure(AuthenticationManagerBuilder authentication) throws Exception {
        authentication.authenticationProvider(this.auth);
    }
    
	@Override
    protected void configure(HttpSecurity http) throws Exception {
		
		http
		.antMatcher("/api/**")
				.authorizeRequests()
				.antMatchers(HttpMethod.POST, "/api/login-jwt").permitAll()
				.antMatchers(HttpMethod.GET, "/api/endereco/**/listar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.GET, "/api/endereco/**/queryById").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.POST, "/api/endereco/**/salvar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.PUT, "/api/endereco/**/editar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.DELETE, "/api/endereco/**/remover").hasAnyAuthority("ADMIN")
				
				.antMatchers(HttpMethod.GET, "/api/municipio/listar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.GET, "/api/municipio/**/queryById").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.POST, "/api/municipio/**/salvar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.PUT, "/api/municipio/**/editar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.DELETE, "/api/municipio/**/remover").hasAnyAuthority("ADMIN")
								
				.antMatchers(HttpMethod.GET, "/api/pessoa/**/listar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.GET, "/api/pessoa/**/queryById").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.POST, "/api/pessoa/**/salvar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.PUT, "/api/pessoa/**/editar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.DELETE, "/api/pessoa/**/remover").hasAnyAuthority("ADMIN")
				
				.antMatchers(HttpMethod.GET, "/api/usuario/**/listar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.GET, "/api/usuario/**/queryById").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.POST, "/api/usuario/**/salvar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.PUT, "/api/usuario/**/editar").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.DELETE, "/api/usuario/**/remover").hasAnyAuthority("ADMIN")
				.antMatchers(HttpMethod.DELETE, "/api/usuario/**/logout").hasAnyAuthority("ADMIN")
				
				
				.antMatchers(HttpMethod.POST, "/api/solus/usuario/validarDados").permitAll()
				.antMatchers(HttpMethod.POST, "/api/solus/usuario/validarCodigo").permitAll()
				.antMatchers(HttpMethod.POST, "/api/solus/usuario/trocarSenha").permitAll()
				.antMatchers(HttpMethod.POST, "/api/solus/usuario/gerarNovoCodigo").permitAll()
				.antMatchers(HttpMethod.GET, "/api/faq/getAll").permitAll()
				.antMatchers(HttpMethod.GET, "/api/solus/avisoAtualizacao/getUltimaAtualizacao").permitAll()
				
				.antMatchers(HttpMethod.POST, "/api/solus/usuario/loginViaSolus/**/**").permitAll()
				.antMatchers(HttpMethod.GET, "/api/solus/guiasAutorizadas/downloadGuiaAutorizada/**/**").permitAll()
				.antMatchers(HttpMethod.GET,"/api/solus/usuario/refreshToken").permitAll()
				//Add URLs públicas acima desse comentário usando antMatchers e permiteAll
				.anyRequest().authenticated()
		.and()
			// filtra requisições de login
			.addFilterBefore(new JWTLoginFilter("/api/login-jwt", authenticationManager()),
					UsernamePasswordAuthenticationFilter.class)
				
			// filtra outras requisições para verificar a presença do JWT no header
			.addFilterBefore(new JWTAuthenticationFilter(),
							UsernamePasswordAuthenticationFilter.class);

		http.csrf().disable();


    }
	
	protected AuthProviderService getAuthProvider() {
		return auth;
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Override
	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}
}
