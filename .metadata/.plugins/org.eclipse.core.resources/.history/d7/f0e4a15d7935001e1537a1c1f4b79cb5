package br.ufrn.imd.solicitacaurn.cassi.controller;

import java.util.Calendar;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.mkapi.cassi.domain.CassiToken;
import br.com.mkapi.cassi.repository.CassiTokenRepository;
import br.com.mkapi.service.ArquivoService;

@Controller
@RequestMapping("/api/cassi/cassiApi")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class CassiApiController {

    @Autowired
    CassiTokenRepository cassiTokenRepository;

	@Autowired
	ArquivoService arquivoService;    

    final String uriToken = "https://rhsso.paas.cassi.com.br/auth/realms/Colaborador/protocol/openid-connect/token";
    final String uriCartao = "https://cartao-participante.api.paas.cassi.com.br/api/v1/CartaoParticipante/listarCartaoReciprocidade";
    final String grantType = "client_credentials";
    final String clientId = "02172353000102";
    final String clientSecret = "065d1874-0a01-43c5-afc7-c4460aea1dae";
    final String userKey = "41ff65ab05dd97fb63da4232df91bef5";

    //Atualizar Token:
    @GetMapping("/updateCassiToken")
    public ResponseEntity<?> updateCassiToken() 
    {
        try {
            Optional<CassiToken> opt = cassiTokenRepository.findById(1L);
            CassiToken cassiToken;
            if(opt.isPresent()){
                cassiToken = opt.get();
                if(tokenValido(cassiToken)){
                    return new ResponseEntity<>("O token atual ainda é válido.", HttpStatus.OK);
                }
            } else{
                cassiToken = new CassiToken();
                cassiToken.setId(1L);
            }
            

            MultiValueMap<String, String> formData = new LinkedMultiValueMap<>();
            formData.add("grant_type", grantType);
            formData.add("client_secret", clientSecret);
            formData.add("client_id", clientId);

            WebClient client = WebClient.builder()
                    .baseUrl(uriToken)
                    .build();
        
            String response = client.post()
                    .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                    .body(BodyInserters.fromFormData(formData))
                    .exchange()
                    .flatMap(clientResponse -> {
                        if (clientResponse.statusCode().is5xxServerError()) {
                            clientResponse.body((clientHttpResponse, context) -> {
                                return clientHttpResponse.getBody();
                            });
                            return clientResponse.bodyToMono(String.class);
                        }
                        else
                            return clientResponse.bodyToMono(String.class);
                    })
                    .block();

            ObjectMapper mapper = new ObjectMapper();
            CassiToken newToken = mapper.readValue(response, CassiToken.class);

            if(newToken != null){
                Calendar calendar = Calendar.getInstance();
                cassiToken.setAccessToken(newToken.getAccessToken());
                cassiToken.setDataPostagem(calendar.getTime());
                cassiToken.setExpiresIn(newToken.getExpiresIn());
                cassiToken.setNotBeforePolicy(newToken.getNotBeforePolicy());
                cassiToken.setRefreshExpiresIn(newToken.getRefreshExpiresIn());
                cassiToken.setRefreshToken(newToken.getRefreshToken());
                cassiToken.setSessionState(newToken.getSessionState());
                cassiToken.setTokenType(newToken.getTokenType());
                cassiTokenRepository.save(cassiToken);

                return new ResponseEntity<>(cassiToken, HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Erro ao obter o Bearer Token.", HttpStatus.FORBIDDEN);
            }            
        } catch(Exception e){
            System.out.println(e);
            return new ResponseEntity<>("Erro ao obter o Bearer Token.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    //Consultar cartão:
    @GetMapping("/consultarCartao/{cpf}")
    public ResponseEntity<?> consultarCartao(@PathVariable(value = "cpf") String cpf) 
    {
        try {
            Optional<CassiToken> opt = cassiTokenRepository.findById(1L);
            CassiToken obj;
            if(opt.isPresent()){
                obj = opt.get();
                if(!tokenValido(obj)){
                    updateCassiToken();
                    obj = cassiTokenRepository.findById(1L).get();
                }
            } else{
                updateCassiToken();
                obj = cassiTokenRepository.findById(1L).get();
            }

            CassiToken cassiToken = obj;

            WebClient client = WebClient.builder()
                    .baseUrl(uriCartao)
                    .build();
        
            String body = "{\"cpf\": \"" + cpf + "\"}";
            String response = client.post()
                    .contentType(MediaType.APPLICATION_JSON)
                    .headers(httpHeaders -> { 
                        httpHeaders.set("User_Key", userKey);
                        httpHeaders.setBearerAuth(cassiToken.getAccessToken());
                    })   
                    .body(BodyInserters.fromObject(body))
                    .exchange()
                    .flatMap(clientResponse -> {
                        if (clientResponse.statusCode().is5xxServerError()) {
                            clientResponse.body((clientHttpResponse, context) -> {
                                return clientHttpResponse.getBody();
                            });
                            return clientResponse.bodyToMono(String.class);
                        }
                        else
                            return clientResponse.bodyToMono(String.class);
                    })                 
                    .block();   

            if(response != null){
                return new ResponseEntity<>(response, HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Erro ao se comunicar com o sistema CASSI.", HttpStatus.FORBIDDEN);
            }
        } catch(Exception e){
            System.out.println(e);
            return new ResponseEntity<>("Erro ao obter os dados do cartão CASSI.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }    

    //Retorna arquivo .pdf com os termos 
    @GetMapping("/consultarTermosCassi")
    public ResponseEntity<?> consultarTermosCassi(){
        try{
            String base64 = arquivoService.recuperarTermosCassi();

            if(base64 != ""){
                return new ResponseEntity<>(base64, HttpStatus.OK);
            } else{
                return new ResponseEntity<>("Não foi possível encontrar o arquivo.", HttpStatus.FORBIDDEN);
            }   
        } catch(Exception e){
            return new ResponseEntity<>("Erro ao obter os pdf com os termos de acesso da CASSI.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    //Checar se o token salvo ainda é válido (A renovação do token acontece a cada 9 horas e 30 minutos):
    boolean tokenValido(CassiToken cassiToken){
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.SECOND, (int) - cassiToken.getExpiresIn() + 1800);
        return calendar.getTime().before(cassiToken.getDataPostagem());
    }
}
