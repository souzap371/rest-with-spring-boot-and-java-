package br.ufrn.imd.solicitacaurn.mkdata.repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.persistence.EntityManager;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import br.com.mkapi.mkdata.domain.Telemedicina;

@Repository
public class TelemedicinaCustomRepositoryImpl implements TelemedicinaCustomRepository {

	@Autowired
	@Qualifier("mkdataEntityManagerFactory")
	private EntityManager entityManager;

	@Autowired
	@Qualifier("mkdata")
	private DataSource dt;
	
	@Autowired
	private ConsultaRepository consultaRepository;
	
	@Override
	public List<Telemedicina> findAllTelemedicinaByPaciente(String codigoBeneficiario, Integer offset) {
		
		StringBuilder queryBuilder = new StringBuilder();
		MapSqlParameterSource parameters = new MapSqlParameterSource();

		queryBuilder.append("SELECT * FROM (\r\n"
				+ "SELECT row_number() OVER (ORDER BY eu2.DTHR_AGENDADO DESC) linha,\r\n"
				+ "eu2.DTHR_AGENDADO, MAX(eu.ID) AS ID, eu.ENVIO_ID, SUBSTR(eu.ENVIADO, -28) AS link\r\n"
				+ "FROM ENVIO_URAXLOG eu\r\n"
				+ "INNER JOIN (SELECT \r\n"
				+ "	MAX(e.ID) AS id, e.PACIENTE_ID, e.CONSULTORIO_ID,\r\n"
				+ "	e.DTHR_AGENDADO, e.MEDICO_ID, e.ESPEC_ID \r\n"
				+ "FROM ENVIO_URA e\r\n"
				+ "GROUP BY \r\n"
				+ "	e.PACIENTE_ID, e.CONSULTORIO_ID,\r\n"
				+ "	e.DTHR_AGENDADO, e.MEDICO_ID, e.ESPEC_ID ) eu2 \r\n"
				+ "ON eu.ENVIO_ID = eu2.ID\r\n"
				+ "INNER JOIN PACIENTES p ON p.ID  = eu2.PACIENTE_ID\r\n"
				+ "INNER JOIN PACIENTEXCARTOES p2 ON p.ID = p2.PACIENTE_ID \r\n"
				+ "WHERE eu.ENVIADO LIKE '%ONLINE%' AND p2.CARTAO = :codigoBeneficiario \r\n"
				+ "GROUP BY eu2.DTHR_AGENDADO, eu.ENVIO_ID, SUBSTR(eu.ENVIADO, -28)\r\n"
				+ ") WHERE linha BETWEEN (:offset + 1) AND (:offset + 10)");
		
		parameters.addValue("codigoBeneficiario", codigoBeneficiario);
		parameters.addValue("offset", offset);
		
		List<Telemedicina> telemedicinaList = new NamedParameterJdbcTemplate(dt).query(queryBuilder.toString(),parameters, new RowMapper<Telemedicina>() {
			@Override
			public Telemedicina mapRow(ResultSet rs, int rowNum) throws SQLException {
				Telemedicina t = new Telemedicina();
				t.setId(rs.getLong("ID"));
				t.setLink(rs.getString("LINK"));
				t.setConsulta(consultaRepository.findById(rs.getLong("ENVIO_ID")).orElse(null));
				
				return t;
			}
		});
		
		return telemedicinaList;
	}

}
