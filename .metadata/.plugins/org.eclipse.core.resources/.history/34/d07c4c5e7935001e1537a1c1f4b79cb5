package br.ufrn.imd.solicitacaurn.solus.repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Objects;

import javax.persistence.EntityManager;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import br.com.mkapi.solus.domain.FiltroPrestador;
import br.com.mkapi.solus.domain.GuiaMedico;
import br.com.mkapi.solus.domain.PrestadoresFavoritosSolus;

@Repository
public class GuiaMedicoCustomRepositoryImpl implements GuiaMedicoCustomRepository{
	@Autowired
	@Qualifier("mainEntityManagerFactory")
	private EntityManager entityManager;

	@Autowired
	@Qualifier("solus")
	private DataSource dt;
	
	@Autowired
	private PrestadoresFavoritosRepositorySolus prestadoresFavoritosRepository;
	
	@Override
	public List<GuiaMedico> findAllPrestadorByForm(FiltroPrestador filtro) {
		
		StringBuilder queryBuilder = new StringBuilder();
		queryBuilder.append("SELECT gm.* FROM VW_GUIA_MEDICO gm WHERE gm.CHAVE_GUIA IS NOT NULL ");
		MapSqlParameterSource parameters = new MapSqlParameterSource();
		
		if(!Objects.isNull(filtro.getEspecialidade())) {
			queryBuilder.append(" AND gm.ESPECIALIDADE_PRESTADOR =:especialidade ");
			parameters.addValue("especialidade", filtro.getEspecialidade().getNome());
		}
		if(!Objects.isNull(filtro.getMunicipio().getNome())) {
			queryBuilder.append(" AND upper(utl_raw.cast_to_varchar2((nlssort(gm.CIDADE_PRESTADOR, 'nls_sort=binary_ai')))) = upper(utl_raw.cast_to_varchar2((nlssort(:nomeMunicipio, 'nls_sort=binary_ai'))))");
        	parameters.addValue("nomeMunicipio", filtro.getMunicipio().getNome().toUpperCase());
    	}
		if(!Objects.isNull(filtro.getMunicipio().getUf())) {
    		queryBuilder.append(" AND gm.UF_PRESTADOR =:uf ");
        	parameters.addValue("uf", filtro.getMunicipio().getUf());
		}
		queryBuilder.append(" order by gm.prestador asc ");
		List<GuiaMedico> prestadores = new NamedParameterJdbcTemplate(dt).query(queryBuilder.toString(),parameters, new RowMapper<GuiaMedico>() {
			@Override
			public GuiaMedico mapRow(ResultSet rs, int rowNum) throws SQLException {
				GuiaMedico c = new GuiaMedico();
				c.setId(rs.getLong("CHAVE_GUIA"));
				c.setPrestador(rs.getString("PRESTADOR"));			
				c.setEspecialidadePrestador(rs.getString("ESPECIALIDADE_PRESTADOR"));				
				c.setTipoPrestador(rs.getString("TIPO_PRESTADOR"));
				c.setCepPrestador(rs.getString("CEP_PRESTADOR"));
				c.setUfPrestador(rs.getString("UF_PRESTADOR"));
				c.setCidadePrestador(rs.getString("CIDADE_PRESTADOR"));
				c.setEnderecoPrestador(rs.getString("ENDERECO_PRESTADOR"));
				c.setComplementoPrestador(rs.getString("COMPLEMENTO_PRESTADOR"));
				c.setNaturezaAtendimentoPermitido(rs.getString("NATUREZA_ATEND_PERMITIDA"));
				c.setRegimeAtendimentoPermitido(rs.getString("REGIME_ATEND_PERMITIDO"));
				c.setFonePrestador(rs.getString("FONE_PRESTADOR"));
				c.setBairroPrestador(rs.getString("BAIRRO_PRESTADOR"));
			    
				
				PrestadoresFavoritosSolus p = prestadoresFavoritosRepository.verificaFavorito(c.getId(), filtro.getUsuario().getId());
				if(p== null) {
					c.setFavorito(false);
				}else {
					c.setFavorito(p.getFavorito());
				}
				
				return c;
			}
		});
		return prestadores;
		
	}
}
