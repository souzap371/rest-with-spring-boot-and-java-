package br.ufrn.imd.solicitacaurn.solus.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import br.com.mkapi.solus.domain.Especialidade;
import br.com.mkapi.solus.domain.FiltroPrestador;
import br.com.mkapi.solus.domain.GuiaMedico;
import br.com.mkapi.solus.domain.PrestadoresFavoritosSolus;
import br.com.mkapi.solus.repository.GuiaMedicoCustomRepository;
import br.com.mkapi.solus.repository.GuiaMedicoRepository;
import br.com.mkapi.solus.repository.PrestadoresFavoritosRepositorySolus;
import br.com.mkapi.solus.repository.UsuarioSolusAppMobRepository;

@Controller
@RequestMapping("/api/solus/guiamedico")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class GuiaMedicoController {

	@Autowired
	GuiaMedicoRepository guiaMedicoRepository;

	@Autowired
	GuiaMedicoCustomRepository guiaMedicoCustomRepository;

	@Autowired
	PrestadoresFavoritosRepositorySolus prestadoresFavoritosRepository;

	@Autowired
	UsuarioSolusAppMobRepository usuarioRepository;

	@GetMapping("/getGuiaMedicoByEspecialidade/{especialidadePrestador}")
	public ResponseEntity<List<GuiaMedico>> getGuiaMedicoByEspecialidade(
			@PathVariable("especialidadePrestador") String especialidadePrestador) {

		List<GuiaMedico> listaGuiaMedico = guiaMedicoRepository.findByEspecialidadePrestador(especialidadePrestador);
		if (listaGuiaMedico.isEmpty())
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		else {
			return new ResponseEntity<>(listaGuiaMedico, HttpStatus.OK);
		}
	}

	@GetMapping("/getAllEspecialidade")
	public ResponseEntity<List<Especialidade>> getAllEspecialidade() {
		List<Especialidade> especialidades = new ArrayList<Especialidade>();
		List<String> list = guiaMedicoRepository.getEspecialidade();
		list.forEach(nome -> {
			Especialidade e = new Especialidade();
			e.setNome(nome);
			especialidades.add(e);
		});
		return new ResponseEntity<>(especialidades, HttpStatus.OK);
	}

	@GetMapping("/getAllFavoritos/{idUsuario}")
	public ResponseEntity<List<GuiaMedico>> getAllFavoritosByIdUsuario(@PathVariable("idUsuario") Long idUsuario) {
		List<Long> listIdGuiaMedica = prestadoresFavoritosRepository.getFavoritoByUsuario(idUsuario);

		List<GuiaMedico> prestadores = new ArrayList<GuiaMedico>();
		listIdGuiaMedica.forEach(id -> {

			Optional<GuiaMedico> gm = guiaMedicoRepository.findById(id);
			if (gm.isPresent()) {
				GuiaMedico prestadorFavorito = gm.get();
				prestadorFavorito.setFavorito(true);
				prestadores.add(prestadorFavorito);
			}
		});

		return new ResponseEntity<>(prestadores, HttpStatus.OK);
	}

	@PostMapping("/filtroGuiaMedico")
	public ResponseEntity<List<GuiaMedico>> getAllFiltrado(@RequestBody FiltroPrestador filtro) {
		List<GuiaMedico> prestadores = guiaMedicoCustomRepository.findAllPrestadorByForm(filtro);
		return new ResponseEntity<>(prestadores, HttpStatus.OK);
	}

	@GetMapping("/updateFavorito/{chaveGuiaMedico}/{idUsuario}")
	public ResponseEntity<Boolean> updateFavorito(@PathVariable("chaveGuiaMedico") Long chaveGuiaMedico,
			@PathVariable("idUsuario") Long idUsuario) {
		try {
			PrestadoresFavoritosSolus p = prestadoresFavoritosRepository.verificaFavorito(chaveGuiaMedico, idUsuario);
			if (p == null) {
				p = new PrestadoresFavoritosSolus();
				p.setChaveGuiaMedica(guiaMedicoRepository.findById(chaveGuiaMedico).get().getId());
				p.setUsuario(usuarioRepository.findById(idUsuario).get());
				p.setFavorito(true);
			} else {
				p.setFavorito(!p.getFavorito());
			}
			prestadoresFavoritosRepository.save(p);
			return new ResponseEntity<>(true, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(false, HttpStatus.BAD_REQUEST);
		}
	}
}
